{
	"name": "dataflow3",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_dataflowtransformation",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_dataflowsink",
						"type": "DatasetReference"
					},
					"name": "sink"
				}
			],
			"transformations": [
				{
					"name": "select"
				},
				{
					"name": "split"
				},
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          customer_id as short,",
				"          first_name as string,",
				"          last_name as string,",
				"          phone as string,",
				"          email as string,",
				"          street as string,",
				"          city as string,",
				"          state as string,",
				"          zip_code as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source1 select(mapColumn(",
				"          customer_id,",
				"          first_name,",
				"          last_name,",
				"          phone,",
				"          city,",
				"          zip_code",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select",
				"select split(phone != 'NULL',",
				"     disjoint: false) ~> split@(phone, phonenull)",
				"split@phonenull derive(phone = replace(phone,'NULL','N/A')) ~> derivedColumn1",
				"split@phone sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          InvoiceNo as string,",
				"          StockCode as string,",
				"          Description as string,",
				"          Quantity as string,",
				"          InvoiceDate as string,",
				"          UnitPrice as string,",
				"          CustomerID as string,",
				"          Country as string",
				"     ),",
				"     partitionFileNames:['customers_clean_report'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink"
			]
		}
	}
}